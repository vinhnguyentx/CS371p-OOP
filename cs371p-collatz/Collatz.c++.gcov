        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:#define CACHE_SIZE 1000000
        -:   20:using namespace std;
        -:   21:
        -:   22:// ------------
        -:   23:// collatz_read
        -:   24:// ------------
        -:   25:
function _Z12collatz_readRKSs called 20 returned 100% blocks executed 80%
       20:   26:pair<int, int> collatz_read (const string& s) {
       20:   27:	istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   28:	int i;
        -:   29:	int j;
       20:   30:	sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       20:   31:	return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   32:
        -:   33://-----------------------
        -:   34:// calculate cycle length
        -:   35://-----------------------
        -:   36:
function _Z12cycle_lengthi called 4103 returned 100% blocks executed 82%
     4103:   37:int cycle_length (int n) {
     4103:   38:    assert(n > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     4103:   39:    int c = 1;
   256340:   40:    while (n > 1) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   248134:   41:        if ((n % 2) == 0) {
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
   125429:   42:            n >>= 1;
   125429:   43:            ++c;
        -:   44:          } else {
   122705:   45:            n = n + (n >> 1) + 1;
   122705:   46:            ++++c;
        -:   47:          }
        -:   48:      }
        -:   49:
     4103:   50:    assert(c > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     4103:   51:    return c;}
        -:   52:
        -:   53:// ------------
        -:   54:// lazy_cache
        -:   55:// -----------
        -:   56:
function _Z10lazy_cachej called 5048 returned 100% blocks executed 78%
     5048:   57:int lazy_cache(unsigned int i){
        -:   58:		#ifdef CACHE_SIZE
        -:   59:		
     5048:   60:    assert (i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   61:    static int Cache[CACHE_SIZE] = {};
     5048:   62:    assert (i < CACHE_SIZE);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     5048:   63:    if (Cache[i] == 0){
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
     4103:   64:        Cache[i] = cycle_length(i);
call    0 returned 100%
        -:   65:    }
     5048:   66:    return Cache[i];
        -:   67:
        -:   68:		#endif
        -:   69:
        -:   70:		#ifndef CACHE_SIZE
        -:   71:
        -:   72:		return cycle_length(i);
        -:   73:
        -:   74:		#endif
        -:   75:}
        -:   76:
        -:   77:// ------------
        -:   78:// collatz_eval
        -:   79:// ------------
        -:   80:
function _Z12collatz_evalii called 24 returned 100% blocks executed 81%
       24:   81:int collatz_eval (int i, int j) {
       24:   82:    assert(i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       24:   83:    assert(j > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   84:
       24:   85:    if (i > j){
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        2:   86:        int temp = j;
        2:   87:        j = i;
        2:   88:        i = temp;
        -:   89:    }
        -:   90:
       24:   91:    int max = 1;
     5093:   92:    while (i <= j) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     5045:   93:        int tempLength = lazy_cache(i);
call    0 returned 100%
     5045:   94:        if (max < tempLength) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      122:   95:            max = tempLength;
        -:   96:        }
     5045:   97:        ++i;
        -:   98:    }
        -:   99:		// int cli = 0;
        -:  100:		// int clj = 0;
        -:  101:		// int max = 1;
        -:  102:    //
        -:  103:		// cli = lazy_cache(i);
        -:  104:		// clj = lazy_cache(j);
        -:  105:		// if (cli > clj) {
        -:  106:		// 		max = cli;
        -:  107:		// } else {
        -:  108:		// 		max = clj;
        -:  109:		// }
       24:  110:		assert (max > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       24:  111:    return max;}
        -:  112:
        -:  113:// -------------
        -:  114:// collatz_print
        -:  115:// -------------
        -:  116:
function _Z13collatz_printRSoiii called 20 returned 100% blocks executed 100%
       20:  117:void collatz_print (ostream& w, int i, int j, int v) {
       20:  118:	w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:  119:
        -:  120:// -------------
        -:  121:// collatz_solve
        -:  122:// -------------
        -:  123:
function _Z13collatz_solveRSiRSo called 4 returned 100% blocks executed 80%
        4:  124:void collatz_solve (istream& r, ostream& w) {
        4:  125:	string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       24:  126:	while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
       16:  127:		const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16:  128:		const int            i = p.first;
       16:  129:		const int            j = p.second;
       16:  130:		const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       23:  131:		collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
